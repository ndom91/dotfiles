return {
  "neovim/nvim-lspconfig",
  config = function()
    require("neodev").setup()
    require("mason").setup()
    require("mason-lspconfig").setup({
      ensure_installed = {
        -- "lua_ls",
        -- "tsserver",
        "astro",
        "html",
        "jsonls",
        "dockerls",
        "bashls",
        "vimls",
        "tailwindcss",
        "cssls",
        "volar",
        "yamlls",
      },
    })
    local lspconfig = require("lspconfig")
    local null_ls = require("null-ls")

    local function goto_next_error()
      vim.diagnostic.goto_next({ severity = "Error" })
    end

    local function goto_prev_error()
      vim.diagnostic.goto_prev({ severity = "Error" })
    end

    local function format_buffer()
      vim.lsp.buf.format({
        async = false,
        filter = function(client)
          return client.name ~= "null-ls"
          -- local current_bufnr = vim.fn.bufnr("%")
          -- local current_buffer_path = vim.api.nvim_buf_get_name(current_bufnr)
          -- if string.find(current_buffer_path, "/opt/checkly") then
          -- 	print("CHECKLY PATH")
          --        return client.name ~= "tsserver" and client.name ~= "pyright" and client.name ~= "eslint"
          -- else
          -- 	print("LSP FORMAT")
          -- 	return client.name ~= "tsserver" and client.name ~= "pyright" and client.name ~= "eslint"
          -- end
        end,
      })
    end

    -- Setup everything on lsp attach
    local on_attach = function(client, bufnr)
      local builtin = require("telescope.builtin")

      -- Enable formatting on save sync
      if client.supports_method("textDocument/formatting") then
        local augroup = vim.api.nvim_create_augroup("LspFormatting", { clear = true })
        vim.api.nvim_clear_autocmds({ group = augroup, buffer = bufnr })
        vim.api.nvim_create_autocmd("BufWritePre", {
          group = augroup,
          buffer = bufnr,
          callback = function()
            vim.lsp.buf.format({ async = false })
          end,
        })
      end

      local function buf_set_keymap(mode, key, func, desc)
        vim.keymap.set(mode, key, func, { buffer = bufnr, silent = true, desc = desc })
      end

      -- Mappings.
      buf_set_keymap("n", "gD", vim.lsp.buf.declaration)
      buf_set_keymap("n", "gd", vim.lsp.buf.definition)
      buf_set_keymap("n", "gi", vim.lsp.buf.implementation)
      buf_set_keymap("n", "<space>rn", vim.lsp.buf.rename)
      buf_set_keymap("n", "<space>rr", vim.lsp.buf.references)
      buf_set_keymap("n", "<space>d", vim.diagnostic.open_float)

      buf_set_keymap("n", "<space>i", vim.lsp.buf.code_action)
      buf_set_keymap("n", "[d", vim.diagnostic.goto_prev)
      buf_set_keymap("n", "]d", vim.diagnostic.goto_next)

      buf_set_keymap("n", "gr", builtin.lsp_references, "[G]oto [R]eferences")
      -- bind("n", "gI", vim.lsp.buf.implementation, { desc = "[G]oto [I]mplementation", buffer = true })
      buf_set_keymap("n", "<leader>ds", builtin.lsp_document_symbols, "[D]ocument [S]ymbols")
      buf_set_keymap("n", "<leader>ws", builtin.lsp_dynamic_workspace_symbols, "[W]orkspace [S]ymbols")

      -- Navigate diagnostics
      buf_set_keymap("n", "[d", vim.diagnostic.goto_prev, "Prev Diagnostic")
      buf_set_keymap("n", "]d", vim.diagnostic.goto_next, "Next Diagnostic")
      buf_set_keymap("n", "<leader>dd", builtin.diagnostics, "List Diagnostics")

      buf_set_keymap("n", "]e", goto_next_error, "Next Error")
      buf_set_keymap("n", "[e", goto_prev_error, "Prev Error")

      buf_set_keymap("n", "K", vim.lsp.buf.hover, "Hover Documentation")
      buf_set_keymap("n", "<C-k>", vim.lsp.buf.signature_help, "Signature Documentation")

      vim.keymap.set("n", "<leader>lf", format_buffer, { buffer = bufnr })
      if client.server_capabilities.document_range_formatting then
        vim.keymap.set("v", "<leader>lf", format_buffer, { buffer = bufnr })
      end
    end

    local handle_lsp = function(opts)
      return opts
    end

    null_ls.setup({
      on_attach = on_attach,
      sources = {
        -- null-ls builtins - https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/doc/BUILTINS.md
        -- null_ls.builtins.formatting.prettierd,
        -- null_ls.builtins.formatting.autopep8,
        -- null_ls.builtins.formatting.stylua,
        null_ls.builtins.formatting.eslint_d,
        null_ls.builtins.formatting.shfmt,

        null_ls.builtins.diagnostics.shellcheck,
        null_ls.builtins.diagnostics.pylint.with({
          diagnostics_postprocess = function(diagnostic)
            diagnostic.code = diagnostic.message_id
          end,
        }),
        null_ls.builtins.formatting.black.with({
          extra_args = { "--line-length=120" },
        }),

        null_ls.builtins.code_actions.eslint_d,
        null_ls.builtins.code_actions.shellcheck,
        require("typescript.extensions.null-ls.code-actions"),
      },
      -- root_dir = lspconfig.util.root_pattern("yarn.lock", "package.json", ".git"),
      --debug = true,
      log = { enabled = true, level = "trace" },
    })

    local capabilities = vim.lsp.protocol.make_client_capabilities()

    -- tsserver setup
    require("typescript").setup({
      disable_commands = false, -- prevent the plugin from creating Vim commands
      debug = false,         -- enable debug logging for commands
      server = handle_lsp({
        root_dir = lspconfig.util.root_pattern("yarn.lock", "package.json", "tsconfig.json", ".git"),
        on_attach = function(client, bufnr)
          client.server_capabilities.document_formatting = false
          client.server_capabilities.document_range_formatting = false

          --ts_utils_attach(client)
          on_attach(client, bufnr)
        end,
        settings = {
          documentFormatting = false,
          typescript = {
            inlayHints = {
              includeInlayParameterNameHints = "all",
              includeInlayParameterNameHintsWhenArgumentMatchesName = false,
              includeInlayFunctionParameterTypeHints = true,
              includeInlayVariableTypeHints = true,
              includeInlayPropertyDeclarationTypeHints = true,
              includeInlayFunctionLikeReturnTypeHints = true,
              includeInlayEnumMemberValueHints = true,
            },
          },
        },
        init_options = {
          hostInfo = "neovim",
          maxTsServerMemory = "4096",
          preferences = { quotePreference = "single", allowIncompleteCompletions = false },
          --tsserver = {
          --path = "/home/armeeh/.config/yarn/global/node_modules/typescript/lib/tsserver.js",
          --},
        },
        -- capabilities = capabilitiesWithoutFomatting,
        capabilities = capabilities,
      }),
    })

    -- Vim lsp
    -- lspconfig.vimls.setup(handle_lsp({
    -- 	on_attach = on_attach,
    -- 	capabilities = capabilities,
    -- }))

    -- JSON lsp
    lspconfig.jsonls.setup(handle_lsp({
      on_attach = on_attach,
      settings = {
        json = {
          -- Schemas https://www.schemastore.org
          schemas = {
            {
              fileMatch = { "package.json" },
              url = "https://json.schemastore.org/package.json",
            },
            {
              fileMatch = { "tsconfig*.json" },
              url = "https://json.schemastore.org/tsconfig.json",
            },
            {
              fileMatch = {
                ".prettierrc",
                ".prettierrc.json",
                "prettier.config.json",
              },
              url = "https://json.schemastore.org/prettierrc.json",
            },
            {
              fileMatch = { ".eslintrc", ".eslintrc.json" },
              url = "https://json.schemastore.org/eslintrc.json",
            },
            {
              fileMatch = {
                ".babelrc",
                ".babelrc.json",
                "babel.config.json",
              },
              url = "https://json.schemastore.org/babelrc.json",
            },
            {
              fileMatch = { "lerna.json" },
              url = "https://json.schemastore.org/lerna.json",
            },
            {
              fileMatch = { "now.json", "vercel.json" },
              url = "https://json.schemastore.org/now.json",
            },
            {
              fileMatch = {
                ".stylelintrc",
                ".stylelintrc.json",
                "stylelint.config.json",
              },
              url = "http://json.schemastore.org/stylelintrc.json",
            },
          },
        },
      },
      capabilities = capabilities,
    }))

    -- lspconfig.tailwindcss.setup(handle_lsp({
    -- 	-- root_dir = lspconfig.util.root_pattern("tailwind.config.js"),
    -- 	on_attach = on_attach,
    -- }))

    -- lspconfig.eslint.setup(handle_lsp({
    --   root_dir = lspconfig.util.root_pattern("package.json"),
    --   on_attach = on_attach,
    -- }))
    --
    lspconfig.volar.setup({
      on_attach = function(client, bufnr)
        client.server_capabilities.document_formatting = false
        client.server_capabilities.document_range_formatting = false
      end,
    })

    -- Loop and setup all LSP servers
    local get_servers = require("mason-lspconfig").get_installed_servers
    for _, server_name in ipairs(get_servers()) do
      lspconfig[server_name].setup({
        -- on_attach = lsp_format_on_save,
        on_attach = on_attach,
        capabilities = capabilities,
      })
    end
    --
    -- lspconfig.prismals.setup(handle_lsp({ on_attach = on_attach }))
    --
    -- lspconfig.astro.setup(handle_lsp({
    -- 	capabilities = capabilities,
    -- 	root_dir = lspconfig.util.root_pattern("yarn.lock", "package.json", "tsconfig.json", ".git"),
    -- }))
    --
    -- lspconfig.cssls.setup(handle_lsp({
    -- 	capabilities = capabilities,
    -- 	root_dir = lspconfig.util.root_pattern("yarn.lock", "package.json", "tsconfig.json", ".git"),
    -- }))
    --
    -- lspconfig.pylsp.setup(handle_lsp({
    -- 	root_dir = lspconfig.util.root_pattern(".venv", ".git"),
    -- 	on_attach = on_attach,
    -- 	settings = { python = { venvPath = "/home/armeeh/.virtualenvs" } },
    -- }))
  end,
  dependencies = {
    "williamboman/mason.nvim",
    "williamboman/mason-lspconfig.nvim",
    "b0o/schemastore.nvim",
    -- "jose-elias-alvarez/null-ls.nvim",
    "hrsh7th/cmp-nvim-lua", -- Snippets
    "jose-elias-alvarez/typescript.nvim",
    "folke/neodev.nvim",  -- lua support for nvim config + development
  },
}
